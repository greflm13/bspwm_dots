#!/bin/bash

dependencies=(
    autorandr
    awk
    bc
    betterlockscreen
    bluetoothctl
    blugon
    brightnessctl
    bspc
    bspwm
    cp
    dmenu
    dunst
    dunstify
    feh
    flameshot
    fswatch
    git
    grep
    ip
    j4-dmenu-desktop
    jq
    networkmanager_dmenu
    ntfs-3g
    numlockx
    picom
    ping
    pipewire
    playerctl
    polybar
    ranger
    rsync
    scp
    sed
    sudo
    sxhkd
    wpctl
    xrandr
    xset
    xsetroot
    xterm
)

checkdeps() {
    echo "checking if all dependencies are installed..."
    echo ""
    MISSING=()
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" >/dev/null; then
            MISSING+=("$dep")
        fi
    done
    if ((${#MISSING[@]} != 0)); then
        echo "Missing dependencies: ${MISSING[*]}"
        exit 1
    else
        echo all dependencies met
    fi
}

bashrc() {
    echo "overwrite .bashrc? [Y/n]"
    while true; do
        read -r answer
        if [[ $answer == "y" || $answer == "Y" || $answer == "" ]]; then
            scp "${HOME}"/.bashrc "${HOME}"/.bashrc.old
            scp .bashrc "${HOME}"/.bashrc
            scp .colorscripts "${HOME}"/.colorscripts
            rm -rf "${HOME}"/pureline
            git clone https://github.com/chris-marsh/pureline.git "${HOME}"/pureline
            cp "${HOME}"/pureline/configs/powerline_full_256col.conf "${HOME}"/.pureline.conf
            sed -i '/duration_segment/ s/./#&/' "${HOME}"/.pureline.conf
            break
        else
            break
        fi
    done
}

wallpaper() {
    echo "set wallpaper? [Y/n]"
    while true; do
        read -r answer
        if [[ $answer == "y" || $answer == "Y" || $answer == "" ]]; then
            mkdir -p "${HOME}"/Pictures/Wallpaper
            cp Wallpaper/bspwm.png "${HOME}"/Pictures/Wallpaper/bspwm.png
            feh --bg-fill "${HOME}"/Pictures/Wallpaper/bspwm.png
            break
        else
            break
        fi
    done
}

color() {
    echo ""
    echo "Choose Polybar accent color:"
    echo -e "\x1b[48;2;20;21;26m                                          \x1b[0m"
    echo -e "\x1b[48;2;20;21;26m   1      2      3      4      5      6   \e[m"
    echo -e "\e[48;5;1m       \e[48;5;2m       \e[48;5;3m       \e[48;5;4m       \e[48;5;5m       \e[48;5;6m       \e[m"
    echo -e "\x1b[48;2;20;21;26m                                          \x1b[0m"
    echo -e "\x1b[48;2;20;21;26m   7      8      9     10     11     12   \e[m"
    echo -e "\e[48;5;9m       \e[48;5;10m       \e[48;5;11m       \e[48;5;12m       \e[48;5;13m       \e[48;5;14m       \e[m"
    echo -e "\x1b[48;2;20;21;26m                                          \x1b[0m"
    echo -e "\x1b[48;2;20;21;26m  13     14     15     16     17     18   \e[m"
    echo -e "\x1b[48;2;140;12;0m       \x1b[48;2;137;175;109m       \x1b[48;2;206;148;31m       \x1b[48;2;59;76;111m       \x1b[48;2;178;108;199m       \x1b[48;2;77;164;175m       \x1b[0m"
    echo ""
    color=""
    while [[ $color == "" ]]; do
        read -r choice
        case $choice in
        "1")
            color=e53947
            ;;
        "2")
            color=74e000
            ;;
        "3")
            color=e5c33e
            ;;
        "4")
            color=4a7de5
            ;;
        "5")
            color=ce3be5
            ;;
        "6")
            color=16bcce
            ;;
        "7")
            color=af3a32
            ;;
        "8")
            color=64c20c
            ;;
        "9")
            color=e5d083
            ;;
        "10")
            color=579dd7
            ;;
        "11")
            color=cc67b9
            ;;
        "12")
            color=5fd3de
            ;;
        "13")
            color=7e0b00
            ;;
        "14")
            color=7b9d62
            ;;
        "15")
            color=b9851c
            ;;
        "16")
            color=354464
            ;;
        "17")
            color=a061b3
            ;;
        "18")
            color=45949d
            ;;
        *) ;;

        esac
    done
    sed -i "s/^ac\s.*/ac = #${color}/g" "${HOME}"/.config/polybar/colors.ini
    sed -i "s/^drawColor=.*/drawColor=#${color}/g" "${HOME}"/.config/flameshot/flameshot.ini
    sed -i "s/^uiColor=.*/uiColor=#${color}/g" "${HOME}"/.config/flameshot/flameshot.ini
    sed -i "s/^\s*frame_color = .*/    frame_color = \"#${color}\"/g" "${HOME}"/.config/dunst/dunstrc
    echo ""
}

setconfig() {
    rsync -a config/* "${HOME}"/.config/
    rsync -a .??* "${HOME}"/ --exclude .git --exclude .bashrc --exclude .colorscripts
    mkdir -p "${HOME}"/Pictures/Screenshots
    mkdir -p "${HOME}"/.local/share/fonts
    scp fonts/*.ttf "${HOME}"/.local/share/fonts/
    fc-cache -f
    xrdb -remove
    xrdb -merge ~/.Xresources
    sed -i "s/^thermal-zone = .*/thermal-zone = $(for i in /sys/class/thermal/thermal_zone*; do echo "$i: $(<"$i"/type)"; done | grep pkg_temp | sed 's/\/sys\/class\/thermal\/thermal_zone\(.*\):.*/\1/g')/g" "${HOME}"/.config/polybar/modules.ini

    echo -e "\e[1;31mPlease set your Monitor Arragement with arandr/xrandr and save the configuration using autorandr -s <name>\e[m"
    echo ""
}

automount() {
    sudo install -D udev/media-automount /bin/media-automount
	sudo install -D udev/umount_dmenu /bin/umount_dmenu
	sudo install -Dm644 udev/media-automount.rules /lib/udev/rules.d/99-media-automount.rules
	sudo install -Dm644 udev/media-automount@.service /lib/systemd/system/media-automount@.service
	sudo install -d /etc/media-automount.d
	sudo install -Cm644 udev/media-automount.d/* /etc/media-automount.d/
    sudo udevadm control --reload-rules
    sudo udevadm trigger
}

main() {
    checkdeps
    bashrc
    wallpaper
    color
    setconfig
    automount
}

case $1 in
    "")
        main
        ;;
    "colorswitch")
        color
        ;;
    *)
        echo "usage: install [colorswitch]"
        exit 1
        ;;
esac
